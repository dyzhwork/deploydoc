(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{434:function(t,s,a){"use strict";a.r(s);var r=a(7),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"es2016-es7-新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es2016-es7-新特性"}},[t._v("#")]),t._v(" ES2016（ES7）新特性")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("ol",[s("li",[t._v("指数运算符："),s("strong",[t._v("**")]),t._v("。")]),t._v(" "),s("li",[t._v("Array.prototype.includes()。")]),t._v(" "),s("li",[t._v("函数作用域中严格模式的变更。")])])]),t._v(" "),s("h2",{attrs:{id:"指数-求幂-操作符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指数-求幂-操作符"}},[t._v("#")]),t._v(" 指数（求幂）操作符")]),t._v(" "),s("p",[t._v("在之前的时候，可以通过 Math.pow()方法来执行求幂运算，但这毕竟是一个方法，一些开发者更希望通过操作符就可以实现这个功能。所以在 ES6 中，使用了两个星号**，来作为求幂运算符。其中：左操作数是基数，右操作数是指数。")]),t._v(" "),s("h2",{attrs:{id:"array-prototype-includes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-includes"}},[t._v("#")]),t._v(" Array.prototype.includes()")]),t._v(" "),s("p",[t._v("ES7 为 Array 添加了新的方法 includes()，查找一个值在不在数组里，若是存在则返回 true，不存在返回 false。")]),t._v(" "),s("h2",{attrs:{id:"函数作用域严格模式的一处改动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域严格模式的一处改动"}},[t._v("#")]),t._v(" 函数作用域严格模式的一处改动")]),t._v(" "),s("p",[t._v("函数中存在 use strict 时，实现运行在严格模式下的参数非常困难，因为参数默认值也可以是函数。这个难点导致大多数 JavaScript 引擎均不实现此功能，而是将其等同于全局对象。")]),t._v(" "),s("p",[t._v("由于实现困难，ES2016 规定在参数被解构或有默认参数的函数中，禁止使用 use strict 指令。只有参数为不包含解构或默认值的简单参数列表时，才可以在函数体中使用 use strict。")])])}),[],!1,null,null,null);s.default=e.exports}}]);