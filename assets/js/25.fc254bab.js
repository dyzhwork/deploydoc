(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{345:function(S,t,s){"use strict";s.r(t);var C=s(7),v=Object(C.a)({},(function(){var S=this,t=S._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":S.$parent.slotKey}},[t("h2",{attrs:{id:"什么是-postcss"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-postcss"}},[S._v("#")]),S._v(" 什么是 POSTCSS")]),S._v(" "),t("p",[S._v("POSTCSS 是在 2013 年由 Andrey Sitnik 发布的，它起源于 CSSO（一款用于压缩 CSS 的工具）的代码库，并逐渐发展成为一个独立的项目。POSTCSS 在发布初期就受到了开发者们的关注和追捧，因为它提供了一种全新的方式来处理 CSS。")]),S._v(" "),t("p",[S._v("近年来，POSTCSS 不断地发展壮大，并且已经成为了前端开发中不可或缺的工具之一。在 POSTCSS 的支持下，开发者们可以更加高效、灵活地编写、管理和优化 CSS，从而提高项目质量和开发效率。")]),S._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[S._v("查看官方介绍")]),S._v(" "),t("p",[t("a",{attrs:{href:"https://postcss.org/",target:"_blank",rel:"noopener noreferrer"}},[S._v("点击此处查看官方网站更详细的介绍"),t("OutboundLink")],1)])]),S._v(" "),t("h2",{attrs:{id:"其他信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他信息"}},[S._v("#")]),S._v(" 其他信息")]),S._v(" "),t("ol",[t("li",[S._v("POSTCSS 是一款用 JavaScript 编写的 CSS 处理器，它的核心功能是将 CSS 解析成抽象语法树（AST），并且提供了一系列的插件来处理这个 AST。开发者可以使用 POSTCSS 自带的插件或者自己编写插件来实现对 CSS 的转换、优化、添加前缀等操作。")]),S._v(" "),t("li",[S._v("POSTCSS 的插件系统非常灵活，插件可以被组合使用，也可以按需加载。这使得开发者能够轻松地扩展 POSTCSS 的功能，并且可以根据项目的需要选择不同的插件进行配置。POSTCSS 也支持在插件中使用 JavaScript 和其他第三方库来处理 CSS，从而满足更加复杂的需求。")]),S._v(" "),t("li",[S._v("除了支持各种各样的插件和定制化配置，POSTCSS 还具有很好的性能表现。它的解析速度比传统的基于正则表达式的 CSS 处理器更快，因为它使用了更加高效的算法。此外，POSTCSS 还可以与许多构建工具集成，如 webpack、Gulp 和 Grunt 等，使得开发者在项目中使用 POSTCSS 更加方便。")])]),S._v(" "),t("p",[t("code",[S._v("总的来说，POSTCSS 是一个功能强大、灵活性高、性能优越的 CSS 处理器，可以帮助开发者更加高效地处理 CSS，提升项目的开发效率。")]),S._v("本质上讲，PostCSS 是一个具有大量可启用 JavaScript 插件的 API ,使用它们，您可以处理 CSS 并创建自定义工具。")]),S._v(" "),t("p",[S._v("PostCSS 最初于 2013 年发布。您可以将其与普通 CSS 语法和上述预处理器一起使用。它最大的优点就是模块化，我们需要的各个功能都可以通过引入各个模块完成，因此，它的效率是非常高的。")]),S._v(" "),t("h2",{attrs:{id:"postcss-的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#postcss-的作用"}},[S._v("#")]),S._v(" POSTCSS 的作用")]),S._v(" "),t("p",[S._v("POSTCSS 的作用是对 CSS 进行转换、优化和添加前缀等处理。它的核心思想是将 CSS 解析成抽象语法树（AST），然后通过插件对这个 AST 进行处理，最后再将处理后的 AST 转回为 CSS。")]),S._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[S._v("具体来说，POSTCSS 可以实现以下功能：")]),S._v(" "),t("ul",[t("li",[S._v("支持使用未来的 CSS 语法，如嵌套规则、变量、 mixin 等，使得开发者能够更加高效地编写 CSS。")]),S._v(" "),t("li",[S._v("自动添加浏览器特定的前缀，使得开发者不需要手动书写一些繁琐的 CSS 代码。")]),S._v(" "),t("li",[S._v("压缩 CSS 文件大小，减小文件加载时间，提升页面性能。")]),S._v(" "),t("li",[S._v("支持使用 CSS Modules 等模块化的 CSS 方案，使得开发者能够更好地管理 CSS 的复杂度。")]),S._v(" "),t("li",[S._v("支持使用各种插件扩展 POSTCSS 的功能，例如 autoprefixer、cssnano、postcss-preset-env 等。")])])]),S._v(" "),t("p",[S._v("简而言之，POSTCSS 可以帮助开发者更加高效地编写、维护和优化 CSS，从而提高项目的开发效率和用户体验。")])])}),[],!1,null,null,null);t.default=v.exports}}]);