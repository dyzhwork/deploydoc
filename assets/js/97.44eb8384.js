(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{437:function(t,r,a){"use strict";a.r(r);var i=a(7),s=Object(i.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"es2019-es10-新特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es2019-es10-新特性"}},[t._v("#")]),t._v(" ES2019（ES10）新特性")]),t._v(" "),r("details",{staticClass:"custom-block details"},[r("summary",[t._v("点击查看")]),t._v(" "),r("ul",[r("li",[t._v("数组展平：Array.flat()、Array.flatMap()。")]),t._v(" "),r("li",[t._v("数组稳定排序：Array.sort()。")]),t._v(" "),r("li",[t._v("把键值对列表转换为一个对象：Object.fromEntries()。")]),t._v(" "),r("li",[t._v("去掉字符串两端的空格：String.trimStart()和 String.trimEnd()。")]),t._v(" "),r("li",[t._v("Symbol 新增属性：description()。")]),t._v(" "),r("li",[t._v("JSON 被归为 ECMAScript 的子集，JSON.stringify()。")]),t._v(" "),r("li",[t._v("try{}catch(error){}参数 error 可以省略。")]),t._v(" "),r("li",[t._v("修正：Function.toString()。")])])]),t._v(" "),r("h2",{attrs:{id:"array-flat-、array-flatmap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array-flat-、array-flatmap"}},[t._v("#")]),t._v(" Array.flat()、Array.flatMap()")]),t._v(" "),r("p",[t._v("Array.flat()方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。Array.flat()把数组展平，通过传入层级深度参数（默认为 1），来为下层数组提升层级。如果想提升所有层级可以写一个比较大的数字甚至是 Infinity，但不推荐这么做。扩展：lodash 中的_.flatten()将数组展开一层。")]),t._v(" "),r("p",[t._v("Array.flatMap()方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map()和深度值 1 的 flat()几乎相同，但 flatMap()通常在合并成一种方法的效率稍微高一些。Array.flatMap()它是 Array.map()和 Array.flat()的组合，通过对 map()调整后的数据尝试展平操作。")]),t._v(" "),r("p",[t._v("Array.flatMap()有个强大的功能是可以在 map()的时候添加和删除元素，这个无论是 map()还是 filter()都没有这个功能。要想删除某一个元素只需要在 mapper 函数里面返回一个空的数组[],而增加元素只需在 mapper 函数里面返回一个长度大于 1 的数组，具体可以看下面的例子：")]),t._v(" "),r("h2",{attrs:{id:"array-sort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array-sort"}},[t._v("#")]),t._v(" Array.sort()")]),t._v(" "),r("p",[t._v("Array.sort()：一定是个稳定的排序。所谓的稳定排序就是：假如没排序之前有两个相同数值的元素 a[i]和 a[j]，而且 i 在 j 前面，即 i < j，经过排序后元素 a[i]依然排在 a[j]元素的前面，也就是说稳定的排序不会改变原来数组里面相同数值的元素的先后关系。")]),t._v(" "),r("h2",{attrs:{id:"object-fromentries"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries"}},[t._v("#")]),t._v(" Object.fromEntries()")]),t._v(" "),r("p",[t._v("Object.fromEntries()方法将一个 iterable 对象返回的一系列键值对转换为一个 Object。")]),t._v(" "),r("h2",{attrs:{id:"string-trimstart-、string-trimend"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#string-trimstart-、string-trimend"}},[t._v("#")]),t._v(" String.trimStart()、String.trimEnd()")]),t._v(" "),r("p",[t._v("String.trimStart()：将原字符串开头的空格，返回新的字符串。这个方法还有一个别名函数，叫做 String.trimLeft()，它们具有一样的功能。")]),t._v(" "),r("h2",{attrs:{id:"symbol-prototype-description"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#symbol-prototype-description"}},[t._v("#")]),t._v(" Symbol.prototype.description()")]),t._v(" "),r("p",[t._v("ECMAScript2019 给 Symbol 对象添加了一个可选的 description 属性，这个属性是个只读属性。")]),t._v(" "),r("h2",{attrs:{id:"function-tostring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#function-tostring"}},[t._v("#")]),t._v(" Function.toString()")]),t._v(" "),r("p",[t._v("之前，调用 function 的 toString()方法会将方法体里面的空格字符省略掉。")]),t._v(" "),r("h2",{attrs:{id:"try-catch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#try-catch"}},[t._v("#")]),t._v(" try/catch")]),t._v(" "),r("p",[t._v("在过去，try/catch 语句中的 catch 语句需要一个变量。 try/catch 语句帮助捕获终端级别的错误。")]),t._v(" "),r("p",[t._v("在 ES10 后，捕获错误的变量是可选的，现在可以跳过错误变量 error:")]),t._v(" "),r("h2",{attrs:{id:"json-被归为-ecmascript-的子集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#json-被归为-ecmascript-的子集"}},[t._v("#")]),t._v(" JSON 被归为 ECMAScript 的子集")]),t._v(" "),r("p",[t._v("在之前，JSON 不是 ECMAScript 的子集，从而导致有些可以在 JSON 中包含的字符，不能够在 ECMAScript 的字面量中出现，比如 U+2028 和 U+2029")]),t._v(" "),r("p",[t._v("ECMAScript2019 后，这次改变之后，我们在编码的时候就不需要再去区分是 JSON 还是 ECMAScript 了。其对用户唯一的影响是保持原样，即在暂不支持特殊字符解析的运行环境中保持 SyntaxError 的报错。ES10 建议的解决方案是将未配对的代理代码点表示为 JSON 转义序列，而不是将它们作为单个 UTF-16 代码单元返回。")]),t._v(" "),r("p",[t._v("格式良好的 JSON.stringify()。此更新修复了字符 U+D800 到 U+DFFF 的处理，有时可以进入 JSON 字符串。这可能是一个问题，因为 JSON.stringify()可能会将这些数字格式化为没有等效 UTF-8 字符的值，但 JSON 格式需要 UTF-8 编码。解析方法使用格式良好的 JSON 字符串，如")])])}),[],!1,null,null,null);r.default=s.exports}}]);